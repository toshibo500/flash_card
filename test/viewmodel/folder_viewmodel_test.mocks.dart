// Mocks generated by Mockito 5.1.0 from annotations
// in flash_card/test/viewmodel/folder_viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flash_card/models/card_model.dart' as _i7;
import 'package:flash_card/models/folder_model.dart' as _i5;
import 'package:flash_card/models/preference_model.dart' as _i2;
import 'package:flash_card/models/quiz_model.dart' as _i10;
import 'package:flash_card/models/repositories/card_repository.dart' as _i6;
import 'package:flash_card/models/repositories/folder_repository.dart' as _i3;
import 'package:flash_card/models/repositories/preference_repository.dart'
    as _i8;
import 'package:flash_card/models/repositories/quiz_repository.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePreferenceModel_0 extends _i1.Fake implements _i2.PreferenceModel {}

/// A class which mocks [FolderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFolderRepository extends _i1.Mock implements _i3.FolderRepository {
  MockFolderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.FolderModel?> create(
          String? parentId, String? title, String? summary, int? sequence) =>
      (super.noSuchMethod(
              Invocation.method(#create, [parentId, title, summary, sequence]),
              returnValue: Future<_i5.FolderModel?>.value())
          as _i4.Future<_i5.FolderModel?>);
  @override
  _i4.Future<int> update(String? id, String? parentId, String? title,
          String? summary, int? sequence) =>
      (super.noSuchMethod(
          Invocation.method(#update, [id, parentId, title, summary, sequence]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> updateWithModel(_i5.FolderModel? row) =>
      (super.noSuchMethod(Invocation.method(#updateWithModel, [row]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> bulkUpdate(List<_i5.FolderModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#bulkUpdate, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<List<_i5.FolderModel>> get(
          {String? id = r'', String? parentId = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [], {#id: id, #parentId: parentId}),
              returnValue:
                  Future<List<_i5.FolderModel>>.value(<_i5.FolderModel>[]))
          as _i4.Future<List<_i5.FolderModel>>);
  @override
  _i4.Future<_i5.FolderModel?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i5.FolderModel?>.value())
          as _i4.Future<_i5.FolderModel?>);
  @override
  _i4.Future<List<_i5.FolderModel>> getByParentId(String? parentId) =>
      (super.noSuchMethod(Invocation.method(#getByParentId, [parentId]),
              returnValue:
                  Future<List<_i5.FolderModel>>.value(<_i5.FolderModel>[]))
          as _i4.Future<List<_i5.FolderModel>>);
  @override
  _i4.Future<List<_i5.FolderModel>> getByIdRecursively(String? id) =>
      (super.noSuchMethod(Invocation.method(#getByIdRecursively, [id]),
              returnValue:
                  Future<List<_i5.FolderModel>>.value(<_i5.FolderModel>[]))
          as _i4.Future<List<_i5.FolderModel>>);
  @override
  _i4.Future<List<_i5.FolderModel>> getByParentIdRecursively(
          String? parentId) =>
      (super.noSuchMethod(
              Invocation.method(#getByParentIdRecursively, [parentId]),
              returnValue:
                  Future<List<_i5.FolderModel>>.value(<_i5.FolderModel>[]))
          as _i4.Future<List<_i5.FolderModel>>);
  @override
  _i4.Future<List<_i5.FolderModel>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<List<_i5.FolderModel>>.value(<_i5.FolderModel>[]))
      as _i4.Future<List<_i5.FolderModel>>);
  @override
  _i4.Future<int> restore(List<_i5.FolderModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#restore, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> import(List<_i5.FolderModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#import, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
}

/// A class which mocks [CardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardRepository extends _i1.Mock implements _i6.CardRepository {
  MockCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.CardModel?> create(
          String? folderId, String? front, String? back, int? sequence,
          {int? quizNum,
          int? correctNum,
          DateTime? quizedAt,
          String? frontLang,
          String? backLang}) =>
      (super.noSuchMethod(
              Invocation.method(#create, [
                folderId,
                front,
                back,
                sequence
              ], {
                #quizNum: quizNum,
                #correctNum: correctNum,
                #quizedAt: quizedAt,
                #frontLang: frontLang,
                #backLang: backLang
              }),
              returnValue: Future<_i7.CardModel?>.value())
          as _i4.Future<_i7.CardModel?>);
  @override
  _i4.Future<int> update(_i7.CardModel? row) =>
      (super.noSuchMethod(Invocation.method(#update, [row]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> bulkUpdate(List<_i7.CardModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#bulkUpdate, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteByFolderId(String? folderId) =>
      (super.noSuchMethod(Invocation.method(#deleteByFolderId, [folderId]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<List<_i7.CardModel>> getAll([String? folderId = r'']) =>
      (super.noSuchMethod(Invocation.method(#getAll, [folderId]),
              returnValue: Future<List<_i7.CardModel>>.value(<_i7.CardModel>[]))
          as _i4.Future<List<_i7.CardModel>>);
  @override
  _i4.Future<List<_i7.CardModel>> getAllByFolderIds(List<String>? folderIds) =>
      (super.noSuchMethod(Invocation.method(#getAllByFolderIds, [folderIds]),
              returnValue: Future<List<_i7.CardModel>>.value(<_i7.CardModel>[]))
          as _i4.Future<List<_i7.CardModel>>);
  @override
  _i4.Future<List<_i7.CardModel>> getList(
          {String? folderId = r'',
          String? orderBy = r'RANDOM()',
          String? orderMethod = r'ASC',
          int? limit = 50}) =>
      (super.noSuchMethod(
              Invocation.method(#getList, [], {
                #folderId: folderId,
                #orderBy: orderBy,
                #orderMethod: orderMethod,
                #limit: limit
              }),
              returnValue: Future<List<_i7.CardModel>>.value(<_i7.CardModel>[]))
          as _i4.Future<List<_i7.CardModel>>);
  @override
  _i4.Future<List<_i7.CardModel>> getListRandom(
          [String? folderId = r'', int? limit = 50]) =>
      (super.noSuchMethod(Invocation.method(#getListRandom, [folderId, limit]),
              returnValue: Future<List<_i7.CardModel>>.value(<_i7.CardModel>[]))
          as _i4.Future<List<_i7.CardModel>>);
  @override
  _i4.Future<int> restore(List<_i7.CardModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#restore, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> import(List<_i7.CardModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#import, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
}

/// A class which mocks [PreferenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceRepository extends _i1.Mock
    implements _i8.PreferenceRepository {
  MockPreferenceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> update(_i2.PreferenceModel? row) =>
      (super.noSuchMethod(Invocation.method(#update, [row]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.PreferenceModel> get() =>
      (super.noSuchMethod(Invocation.method(#get, []),
              returnValue:
                  Future<_i2.PreferenceModel>.value(_FakePreferenceModel_0()))
          as _i4.Future<_i2.PreferenceModel>);
}

/// A class which mocks [QuizRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizRepository extends _i1.Mock implements _i9.QuizRepository {
  MockQuizRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i10.QuizModel?> create(String? folderId, DateTime? startedAt,
          [DateTime? endedAt, int? quizNum, int? correctNum]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #create, [folderId, startedAt, endedAt, quizNum, correctNum]),
              returnValue: Future<_i10.QuizModel?>.value())
          as _i4.Future<_i10.QuizModel?>);
  @override
  _i4.Future<int> update(_i10.QuizModel? row) =>
      (super.noSuchMethod(Invocation.method(#update, [row]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteByFolderId(String? folderId) =>
      (super.noSuchMethod(Invocation.method(#deleteByFolderId, [folderId]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<_i10.QuizModel?> get(String? id) =>
      (super.noSuchMethod(Invocation.method(#get, [id]),
              returnValue: Future<_i10.QuizModel?>.value())
          as _i4.Future<_i10.QuizModel?>);
  @override
  _i4.Future<List<_i10.QuizModel>> getAll([String? folderId = r'']) =>
      (super.noSuchMethod(Invocation.method(#getAll, [folderId]),
              returnValue:
                  Future<List<_i10.QuizModel>>.value(<_i10.QuizModel>[]))
          as _i4.Future<List<_i10.QuizModel>>);
  @override
  _i4.Future<List<_i10.QuizModel>> getList(
          [String? folderId = r'',
          int? rowCount = -1,
          String? orderBy = r'ASC']) =>
      (super.noSuchMethod(
              Invocation.method(#getList, [folderId, rowCount, orderBy]),
              returnValue:
                  Future<List<_i10.QuizModel>>.value(<_i10.QuizModel>[]))
          as _i4.Future<List<_i10.QuizModel>>);
  @override
  _i4.Future<int> restore(List<_i10.QuizModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#restore, [rows]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
}
