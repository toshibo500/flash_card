// Mocks generated by Mockito 5.1.0 from annotations
// in flash_card/test/folder_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:flash_card/models/card_model.dart' as _i9;
import 'package:flash_card/models/folder_model.dart' as _i6;
import 'package:flash_card/models/preference_model.dart' as _i7;
import 'package:flash_card/models/repositories/card_repository.dart' as _i3;
import 'package:flash_card/models/repositories/folder_repository.dart' as _i2;
import 'package:flash_card/models/repositories/preference_repository.dart'
    as _i4;
import 'package:flash_card/models/repositories/quiz_repository.dart' as _i5;
import 'package:flash_card/viewmodels/folder_viewmodel.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFolderRepository_0 extends _i1.Fake implements _i2.FolderRepository {
}

class _FakeCardRepository_1 extends _i1.Fake implements _i3.CardRepository {}

class _FakePreferenceRepository_2 extends _i1.Fake
    implements _i4.PreferenceRepository {}

class _FakeQuizRepository_3 extends _i1.Fake implements _i5.QuizRepository {}

class _FakeFolderModel_4 extends _i1.Fake implements _i6.FolderModel {}

class _FakePreferenceModel_5 extends _i1.Fake implements _i7.PreferenceModel {}

/// A class which mocks [FolderViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFolderViewModel extends _i1.Mock implements _i8.FolderViewModel {
  MockFolderViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FolderRepository get folderRepository =>
      (super.noSuchMethod(Invocation.getter(#folderRepository),
          returnValue: _FakeFolderRepository_0()) as _i2.FolderRepository);
  @override
  set folderRepository(_i2.FolderRepository? _folderRepository) => super
      .noSuchMethod(Invocation.setter(#folderRepository, _folderRepository),
          returnValueForMissingStub: null);
  @override
  _i3.CardRepository get cardRepository =>
      (super.noSuchMethod(Invocation.getter(#cardRepository),
          returnValue: _FakeCardRepository_1()) as _i3.CardRepository);
  @override
  set cardRepository(_i3.CardRepository? _cardRepository) =>
      super.noSuchMethod(Invocation.setter(#cardRepository, _cardRepository),
          returnValueForMissingStub: null);
  @override
  _i4.PreferenceRepository get prefRepository => (super.noSuchMethod(
      Invocation.getter(#prefRepository),
      returnValue: _FakePreferenceRepository_2()) as _i4.PreferenceRepository);
  @override
  set prefRepository(_i4.PreferenceRepository? _prefRepository) =>
      super.noSuchMethod(Invocation.setter(#prefRepository, _prefRepository),
          returnValueForMissingStub: null);
  @override
  _i5.QuizRepository get quizRepository =>
      (super.noSuchMethod(Invocation.getter(#quizRepository),
          returnValue: _FakeQuizRepository_3()) as _i5.QuizRepository);
  @override
  set quizRepository(_i5.QuizRepository? _quizRepository) =>
      super.noSuchMethod(Invocation.setter(#quizRepository, _quizRepository),
          returnValueForMissingStub: null);
  @override
  _i6.FolderModel get selectedFolder =>
      (super.noSuchMethod(Invocation.getter(#selectedFolder),
          returnValue: _FakeFolderModel_4()) as _i6.FolderModel);
  @override
  set selectedFolder(_i6.FolderModel? _selectedFolder) =>
      super.noSuchMethod(Invocation.setter(#selectedFolder, _selectedFolder),
          returnValueForMissingStub: null);
  @override
  List<_i6.FolderModel> get folderItems =>
      (super.noSuchMethod(Invocation.getter(#folderItems),
          returnValue: <_i6.FolderModel>[]) as List<_i6.FolderModel>);
  @override
  List<_i9.CardModel> get cardItems =>
      (super.noSuchMethod(Invocation.getter(#cardItems),
          returnValue: <_i9.CardModel>[]) as List<_i9.CardModel>);
  @override
  _i7.PreferenceModel get preference =>
      (super.noSuchMethod(Invocation.getter(#preference),
          returnValue: _FakePreferenceModel_5()) as _i7.PreferenceModel);
  @override
  bool get hasSubFolders =>
      (super.noSuchMethod(Invocation.getter(#hasSubFolders), returnValue: false)
          as bool);
  @override
  bool get hasCard =>
      (super.noSuchMethod(Invocation.getter(#hasCard), returnValue: false)
          as bool);
  @override
  bool get isEmptyFolder =>
      (super.noSuchMethod(Invocation.getter(#isEmptyFolder), returnValue: false)
          as bool);
  @override
  bool get editMode =>
      (super.noSuchMethod(Invocation.getter(#editMode), returnValue: false)
          as bool);
  @override
  set editMode(dynamic mode) =>
      super.noSuchMethod(Invocation.setter(#editMode, mode),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i10.Future<void> addFolder(String? title, String? summary) =>
      (super.noSuchMethod(Invocation.method(#addFolder, [title, summary]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> removeFolder(int? index) => (super.noSuchMethod(
      Invocation.method(#removeFolder, [index]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateFolder(
          {int? index,
          String? parentId,
          String? title,
          String? summary,
          int? sequence}) =>
      (super.noSuchMethod(
              Invocation.method(#updateFolder, [], {
                #index: index,
                #parentId: parentId,
                #title: title,
                #summary: summary,
                #sequence: sequence
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  void getAllFolder(String? parentId) =>
      super.noSuchMethod(Invocation.method(#getAllFolder, [parentId]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> reorderFolder(int? oldIndex, int? newIndex) => (super
          .noSuchMethod(Invocation.method(#reorderFolder, [oldIndex, newIndex]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i10.Future<void>);
  @override
  void getPreference() =>
      super.noSuchMethod(Invocation.method(#getPreference, []),
          returnValueForMissingStub: null);
  @override
  void getAllCard(String? folderId) =>
      super.noSuchMethod(Invocation.method(#getAllCard, [folderId]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> addCard(
          String? front, String? back, String? frontLang, String? backLang) =>
      (super.noSuchMethod(
              Invocation.method(#addCard, [front, back, frontLang, backLang]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> removeCard(int? index) => (super.noSuchMethod(
      Invocation.method(#removeCard, [index]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateCard({int? index, _i9.CardModel? card}) =>
      (super.noSuchMethod(
              Invocation.method(#updateCard, [], {#index: index, #card: card}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> reorderCard(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(Invocation.method(#reorderCard, [oldIndex, newIndex]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  void addListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
