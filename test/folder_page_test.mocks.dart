// Mocks generated by Mockito 5.0.17 from annotations
// in flash_card/test/folder_page_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i4;

import 'package:flash_card/models/book_model.dart' as _i3;
import 'package:flash_card/viewmodels/folder_viewmodel.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FolderViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFolderViewModel extends _i1.Mock implements _i2.FolderViewModel {
  MockFolderViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.BookModel> get items =>
      (super.noSuchMethod(Invocation.getter(#items),
          returnValue: <_i3.BookModel>[]) as List<_i3.BookModel>);
  @override
  bool get editMode =>
      (super.noSuchMethod(Invocation.getter(#editMode), returnValue: false)
          as bool);
  @override
  set editMode(dynamic mode) =>
      super.noSuchMethod(Invocation.setter(#editMode, mode),
          returnValueForMissingStub: null);
  @override
  set selectedFolder(dynamic folder) =>
      super.noSuchMethod(Invocation.setter(#selectedFolder, folder),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void add(String? title, String? summary) =>
      super.noSuchMethod(Invocation.method(#add, [title, summary]),
          returnValueForMissingStub: null);
  @override
  void remove(int? index) =>
      super.noSuchMethod(Invocation.method(#remove, [index]),
          returnValueForMissingStub: null);
  @override
  void update(
          {int? index,
          String? folderId,
          String? title,
          String? summary,
          int? sequence}) =>
      super.noSuchMethod(
          Invocation.method(#update, [], {
            #index: index,
            #folderId: folderId,
            #title: title,
            #summary: summary,
            #sequence: sequence
          }),
          returnValueForMissingStub: null);
  @override
  void getAll(String? folderId) =>
      super.noSuchMethod(Invocation.method(#getAll, [folderId]),
          returnValueForMissingStub: null);
  @override
  void reorder(int? oldIndex, int? newIndex) =>
      super.noSuchMethod(Invocation.method(#reorder, [oldIndex, newIndex]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
